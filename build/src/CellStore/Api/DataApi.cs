/* 
 * Cellstore API
 *
 * <h3>CellStore API</h3>
 *
 * OpenAPI spec version: vX.X.X
 * Contact: support@28.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CellStore.Client;
using CellStore.Model;

namespace CellStore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object AddArchives (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null);

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddArchivesWithHttpInfo (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null);
        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Object</returns>
        Object AddEntities (string token, Object entity);

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddEntitiesWithHttpInfo (string token, Object entity);
        /// <summary>
        /// Add a fact to a archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Object</returns>
        Object AddFacts (string token, Object fact);

        /// <summary>
        /// Add a fact to a archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddFactsWithHttpInfo (string token, Object fact);
        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Object</returns>
        Object AddLabels (string token, Object label);

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddLabelsWithHttpInfo (string token, Object label);
        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Object</returns>
        Object AddModelStructureForComponent (string token, Object modelStructure, string profileName = null);

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddModelStructureForComponentWithHttpInfo (string token, Object modelStructure, string profileName = null);
        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Object</returns>
        Object AddReportElements (string token, Object reportElement);

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddReportElementsWithHttpInfo (string token, Object reportElement);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Object</returns>
        Object AddRules (string token, Object rules);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddRulesWithHttpInfo (string token, Object rules);
        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Object</returns>
        Object AddSections (string token, Object section, string profileName = null);

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddSectionsWithHttpInfo (string token, Object section, string profileName = null);
        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID). 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Object</returns>
        Object AddTaxonomy (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null);

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID). 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddTaxonomyWithHttpInfo (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null);
        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Object</returns>
        Object CopyArchive (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null);

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CopyArchiveWithHttpInfo (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null);
        /// <summary>
        /// Deletes an archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteArchive (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);

        /// <summary>
        /// Deletes an archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteArchiveWithHttpInfo (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);
        /// <summary>
        /// Deletes an entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteEntity (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null);

        /// <summary>
        /// Deletes an entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEntityWithHttpInfo (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null);
        /// <summary>
        /// Deletes a label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteLabel (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null);

        /// <summary>
        /// Deletes a label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteLabelWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null);
        /// <summary>
        /// Deletes a component including its model structure.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteModelStructureForComponent (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null);

        /// <summary>
        /// Deletes a component including its model structure.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteModelStructureForComponentWithHttpInfo (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null);
        /// <summary>
        /// Deletes a report element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteReportElement (string token, string profileName = null, string aid = null, string section = null, string reportElement = null);

        /// <summary>
        /// Deletes a report element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteReportElementWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null);
        /// <summary>
        /// Deletes a section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object DeleteSection (string token, string profileName = null, string aid = null, string section = null);

        /// <summary>
        /// Deletes a section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSectionWithHttpInfo (string token, string profileName = null, string aid = null, string section = null);
        /// <summary>
        /// Update one or more archives with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Object</returns>
        Object EditArchives (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);

        /// <summary>
        /// Update one or more archives with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EditArchivesWithHttpInfo (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);
        /// <summary>
        /// Update one or more entities with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object EditEntities (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null);

        /// <summary>
        /// Update one or more entities with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EditEntitiesWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null);
        /// <summary>
        /// Patch one or more facts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Object</returns>
        Object EditFacts (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null);

        /// <summary>
        /// Patch one or more facts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EditFactsWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null);
        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetArchives (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetArchivesWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all components of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetComponents (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null);

        /// <summary>
        /// Retrieve a summary for all components of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetComponentsWithHttpInfo (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null);
        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetDataPointsForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetDataPointsForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetEntities (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEntitiesWithHttpInfo (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetFactTableForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFactTableForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetFactTableForReport (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFactTableForReportWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve one or more facts for a combination of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetFacts (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve one or more facts for a combination of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFactsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve labels for the supplied components and report elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetLabels (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve labels for the supplied components and report elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLabelsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetModelStructureForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetModelStructureForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetPeriods (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPeriodsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the report elements contained in a set of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetReportElements (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the report elements contained in a set of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetReportElementsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all rules of a given section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetRules (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve a summary for all rules of a given section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetRulesWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all sections of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetSections (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve a summary for all sections of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSectionsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Object</returns>
        Object GetSpreadsheetForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null);

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSpreadsheetForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null);
        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Object</returns>
        Object GetSpreadsheetForReport (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null);

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSpreadsheetForReportWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddArchivesAsync (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null);

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddArchivesAsyncWithHttpInfo (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null);
        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddEntitiesAsync (string token, Object entity);

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEntitiesAsyncWithHttpInfo (string token, Object entity);
        /// <summary>
        /// Add a fact to a archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddFactsAsync (string token, Object fact);

        /// <summary>
        /// Add a fact to a archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFactsAsyncWithHttpInfo (string token, Object fact);
        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddLabelsAsync (string token, Object label);

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLabelsAsyncWithHttpInfo (string token, Object label);
        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddModelStructureForComponentAsync (string token, Object modelStructure, string profileName = null);

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddModelStructureForComponentAsyncWithHttpInfo (string token, Object modelStructure, string profileName = null);
        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddReportElementsAsync (string token, Object reportElement);

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReportElementsAsyncWithHttpInfo (string token, Object reportElement);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddRulesAsync (string token, Object rules);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRulesAsyncWithHttpInfo (string token, Object rules);
        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddSectionsAsync (string token, Object section, string profileName = null);

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSectionsAsyncWithHttpInfo (string token, Object section, string profileName = null);
        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID). 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddTaxonomyAsync (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null);

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID). 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTaxonomyAsyncWithHttpInfo (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null);
        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CopyArchiveAsync (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null);

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CopyArchiveAsyncWithHttpInfo (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null);
        /// <summary>
        /// Deletes an archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteArchiveAsync (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);

        /// <summary>
        /// Deletes an archive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArchiveAsyncWithHttpInfo (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);
        /// <summary>
        /// Deletes an entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEntityAsync (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null);

        /// <summary>
        /// Deletes an entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntityAsyncWithHttpInfo (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null);
        /// <summary>
        /// Deletes a label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteLabelAsync (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null);

        /// <summary>
        /// Deletes a label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLabelAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null);
        /// <summary>
        /// Deletes a component including its model structure.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteModelStructureForComponentAsync (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null);

        /// <summary>
        /// Deletes a component including its model structure.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelStructureForComponentAsyncWithHttpInfo (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null);
        /// <summary>
        /// Deletes a report element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteReportElementAsync (string token, string profileName = null, string aid = null, string section = null, string reportElement = null);

        /// <summary>
        /// Deletes a report element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportElementAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null);
        /// <summary>
        /// Deletes a section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSectionAsync (string token, string profileName = null, string aid = null, string section = null);

        /// <summary>
        /// Deletes a section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSectionAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null);
        /// <summary>
        /// Update one or more archives with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EditArchivesAsync (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);

        /// <summary>
        /// Update one or more archives with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditArchivesAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null);
        /// <summary>
        /// Update one or more entities with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EditEntitiesAsync (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null);

        /// <summary>
        /// Update one or more entities with partial information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditEntitiesAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null);
        /// <summary>
        /// Patch one or more facts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EditFactsAsync (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null);

        /// <summary>
        /// Patch one or more facts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditFactsAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null);
        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetArchivesAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArchivesAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all components of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetComponentsAsync (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null);

        /// <summary>
        /// Retrieve a summary for all components of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetComponentsAsyncWithHttpInfo (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null);
        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetDataPointsForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDataPointsForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEntitiesAsync (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEntitiesAsyncWithHttpInfo (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFactTableForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFactTableForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFactTableForReportAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFactTableForReportAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve one or more facts for a combination of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFactsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve one or more facts for a combination of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFactsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve labels for the supplied components and report elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLabelsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve labels for the supplied components and report elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLabelsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetModelStructureForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetModelStructureForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPeriodsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPeriodsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the report elements contained in a set of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetReportElementsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve the report elements contained in a set of archives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReportElementsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all rules of a given section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetRulesAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve a summary for all rules of a given section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRulesAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve a summary for all sections of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSectionsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null);

        /// <summary>
        /// Retrieve a summary for all sections of a given archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSectionsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSpreadsheetForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null);

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSpreadsheetForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null);
        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSpreadsheetForReportAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null);

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSpreadsheetForReportAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private CellStore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CellStore.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CellStore.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CellStore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object AddArchives (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null)
        {
             ApiResponse<Object> localVarResponse = AddArchivesWithHttpInfo(token, archive, profileName, aid, archiveDetectionProfileName, taxonomy, insertEntity, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddArchivesWithHttpInfo (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddArchives");
            // verify the required parameter 'archive' is set
            if (archive == null)
                throw new ApiException(400, "Missing required parameter 'archive' when calling DataApi->AddArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (archiveDetectionProfileName != null) localVarQueryParams.Add("archive-detection-profile-name", Configuration.ApiClient.ParameterToString(archiveDetectionProfileName)); // query parameter
            if (taxonomy != null) localVarQueryParams.Add("taxonomy", Configuration.ApiClient.ParameterToString(taxonomy)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
                        if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.SingleParameterToString(contentType)); // header parameter
/* 28msec */
            if (archive != null && archive.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(archive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archive; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddArchivesAsync (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null)
        {
             ApiResponse<Object> localVarResponse = await AddArchivesAsyncWithHttpInfo(token, archive, profileName, aid, archiveDetectionProfileName, taxonomy, insertEntity, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update archives. The archives are identified with Archive IDs (AIDs).  There are two ways to create an archive: a full import of an XBRL instance and taxonomy out of a ZIP file, or a new empty archive with a JSON object containing its metadata.  A full import is performed by provided, in the body of the request, a ZIP Deflate-compressed archive. This will import all the facts from the instance, as well as the taxonomy schema and linkbases.  Alternatively, a new empty archive can be created by submitting a JSON object containing general information about the archive. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive | | Entity   | string | optional | The EID to which the archive belongs | | Entities  | array of strings (at least one) | required if Entity is absent | Used if the archive reports information on more than one entity. | | InstanceURL  | string | optional | The URL of the original XBRL instance | | Namespaces  | object with string values | optional | Maps prefixes to namespaces for the archive (common bindings are automatically added) | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the archives endpoint as input:  - Components (string) - Sections (string) - NumSections (integer) - NumFacts (integer) - NumFootnotes (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer)  Several empty archives can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="archive">The body of the request. If the content type is application/json, the archive JSON objects, which must satisfy the constraints described in the field table. If the content type is application/xbrlx, a single ZIP-Deflate-compressed XBRL archive.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="archiveDetectionProfileName">this parameter can be used to override the algorithm used to identify which files are the archive entrypoint. Allowed values are: AUTO (automatic detection) and FSA (automatic detection, with identification of Audit and Public documents). (optional, default to AUTO)</param>
        /// <param name="taxonomy">Whether the specified archive is an XBRL taxonomy or not. (Only used when providing compressed XBRL archives) (optional, default to false)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true, only used when providing compressed XBRL archives) (optional, default to true)</param>
        /// <param name="contentType">Content-Type of the request, as an HTTP header. It must be set to \&quot;application/json\&quot; when providing an archive in json format, or to \&quot;application/xbrlx\&quot; when providing a ZIP Deflate-compressed XBRL archive. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddArchivesAsyncWithHttpInfo (string token, Object archive, string profileName = null, string aid = null, string archiveDetectionProfileName = null, bool? taxonomy = null, bool? insertEntity = null, string contentType = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddArchives");
            // verify the required parameter 'archive' is set
            if (archive == null)
                throw new ApiException(400, "Missing required parameter 'archive' when calling DataApi->AddArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (archiveDetectionProfileName != null) localVarQueryParams.Add("archive-detection-profile-name", Configuration.ApiClient.ParameterToString(archiveDetectionProfileName)); // query parameter
            if (taxonomy != null) localVarQueryParams.Add("taxonomy", Configuration.ApiClient.ParameterToString(taxonomy)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
                        if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.SingleParameterToString(contentType)); // header parameter
/* 28msec */
            if (archive != null && archive.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(archive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archive; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Object</returns>
        public Object AddEntities (string token, Object entity)
        {
             ApiResponse<Object> localVarResponse = AddEntitiesWithHttpInfo(token, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddEntitiesWithHttpInfo (string token, Object entity)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddEntities");
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling DataApi->AddEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddEntitiesAsync (string token, Object entity)
        {
             ApiResponse<Object> localVarResponse = await AddEntitiesAsyncWithHttpInfo(token, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update entity. The entities are identified with Entity IDs (EIDs).  An entity must be specified as a JSON object that must be valid against a JSound schema.  It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | EID   | string | optional | The entity ID (EID). | | EIDs  | array of strings (at least one) | required if EID is absent | The EIDs, if more than one EID exists for this entity. Must be present if and only if EID is absent. | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following field is allowed for the purpose of feeding back the output of the entities endpoint as input:  - Archives (string)  Several entities can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="entity">The entity objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddEntitiesAsyncWithHttpInfo (string token, Object entity)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddEntities");
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling DataApi->AddEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add a fact to a archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Object</returns>
        public Object AddFacts (string token, Object fact)
        {
             ApiResponse<Object> localVarResponse = AddFactsWithHttpInfo(token, fact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a fact to a archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddFactsWithHttpInfo (string token, Object fact)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddFacts");
            // verify the required parameter 'fact' is set
            if (fact == null)
                throw new ApiException(400, "Missing required parameter 'fact' when calling DataApi->AddFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (fact != null && fact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add a fact to a archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddFactsAsync (string token, Object fact)
        {
             ApiResponse<Object> localVarResponse = await AddFactsAsyncWithHttpInfo(token, fact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a fact to a archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fact">The fact objects (they must be valid, and have an archive aspect that points to an existing archive). To logically delete a fact, omit the Value field.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFactsAsyncWithHttpInfo (string token, Object fact)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddFacts");
            // verify the required parameter 'fact' is set
            if (fact == null)
                throw new ApiException(400, "Missing required parameter 'fact' when calling DataApi->AddFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (fact != null && fact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Object</returns>
        public Object AddLabels (string token, Object label)
        {
             ApiResponse<Object> localVarResponse = AddLabelsWithHttpInfo(token, label);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddLabelsWithHttpInfo (string token, Object label)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddLabels");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DataApi->AddLabels");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (label != null && label.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(label); // http body (model) parameter
            }
            else
            {
                localVarPostBody = label; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddLabelsAsync (string token, Object label)
        {
             ApiResponse<Object> localVarResponse = await AddLabelsAsyncWithHttpInfo(token, label);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update labels. A label is identified with an Archive ID (AID), a section URI, a report element, a language and a label role.  A label can be created by submitting a JSON object containing general information about the label. This JSON object must be valid against a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field         | Type   | Presence | Content                          | |- -- -- -- -- -- -- --|- -- -- -- -|- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | AID           | string | required | The AID of the archive to which the section belongs | | SectionURI    | string | required | The URI of the section           | | ReportElement | string | required | The name of a report element     | | Language      | string | required | A language code, e.g., en-US or de | | Role          | string | required | A label role                     | | Value         | string | required | The label itself                 |  Several labels can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="label">The label objects (they must be valid).</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLabelsAsyncWithHttpInfo (string token, Object label)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddLabels");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DataApi->AddLabels");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (label != null && label.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(label); // http body (model) parameter
            }
            else
            {
                localVarPostBody = label; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object AddModelStructureForComponent (string token, Object modelStructure, string profileName = null)
        {
             ApiResponse<Object> localVarResponse = AddModelStructureForComponentWithHttpInfo(token, modelStructure, profileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddModelStructureForComponentWithHttpInfo (string token, Object modelStructure, string profileName = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddModelStructureForComponent");
            // verify the required parameter 'modelStructure' is set
            if (modelStructure == null)
                throw new ApiException(400, "Missing required parameter 'modelStructure' when calling DataApi->AddModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (modelStructure != null && modelStructure.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(modelStructure); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelStructure; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddModelStructureForComponentAsync (string token, Object modelStructure, string profileName = null)
        {
             ApiResponse<Object> localVarResponse = await AddModelStructureForComponentAsyncWithHttpInfo(token, modelStructure, profileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update components by providing their model structures. The components are identified with an AID, a section URI and the qualified name of a hypercube.  A new component can be created by submitting a JSON object containing the model structure of the component. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the component belongs | | SectionURI   | string (URI) | optional | The URI of the section to which the component belongs | | HypercubeName  | string (QName lexical space) | required | The name of the hypercube that this component involves | | ModelStructure  | array of model structure node objects | required | The hierarchical model structure, as a tree of nodes that reference report elements (see below) |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Section (string) - Hypercube (string)  #### Model structure node properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | Name | string | required | The qualified name of a report element that exists in the component&#39;s section | | Children   | array | optional | An array of model structure node objects that reference further children report elements |  Additionally, the following fields are allowed for the purpose of feeding back the output of the modelstructure-for-component endpoint as input:  - Depth (integer) - Label (string) - BaseType (string) - Kind (string) - Order (integer) - DataType (string) - BaseDataType (string) - Balance (string) - Abstract (boolean) - PeriodType (string)  The hierarchy of the model structure must fulfill the constraints described in the documentation of model structures. We repeat it here for convenience:  | Kind of report element |  Allowed children                           | |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| | Abstract               | Hypercube (if top-level), Abstract, Concept | | Hypercube              | Dimension, LineItems                        | | Dimension              | Member                                      | | Member                 | Member                                      | | LineItems              | Abstract, Concept                           | | Concept                | none                                        |  The model structure MUST involve the hypercube referred to in the top-level HypercubeName field, only this one, and only once, either top-level or below a top-level abstract. Its children are the dimensions with their members, as well as the line items hierarchy.  The only exception to the requirement of the hypercube report element is the special xbrl28:ImpliedTable hypercube. If HypercubeName is xbrl28:ImpliedTable, then the model structure can only involve Abstracts and Concepts, and has no dimensionality.  Several components can be created at the same time by posting a sequence of non-comma-separated JSON model structure objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="modelStructure">The model structures, which must satisfy the constraints described in the properties table.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddModelStructureForComponentAsyncWithHttpInfo (string token, Object modelStructure, string profileName = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddModelStructureForComponent");
            // verify the required parameter 'modelStructure' is set
            if (modelStructure == null)
                throw new ApiException(400, "Missing required parameter 'modelStructure' when calling DataApi->AddModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (modelStructure != null && modelStructure.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(modelStructure); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelStructure; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Object</returns>
        public Object AddReportElements (string token, Object reportElement)
        {
             ApiResponse<Object> localVarResponse = AddReportElementsWithHttpInfo(token, reportElement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddReportElementsWithHttpInfo (string token, Object reportElement)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddReportElements");
            // verify the required parameter 'reportElement' is set
            if (reportElement == null)
                throw new ApiException(400, "Missing required parameter 'reportElement' when calling DataApi->AddReportElements");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (reportElement != null && reportElement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportElement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportElement; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReportElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddReportElementsAsync (string token, Object reportElement)
        {
             ApiResponse<Object> localVarResponse = await AddReportElementsAsyncWithHttpInfo(token, reportElement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update report elements. The report elements are identified with an AID, a section URI and a qualified name.  A new report element can be created by submitting a JSON object containing general information about the report element. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the report element belongs | | SectionURI   | string (URI) | required | The URI of the section to which the report element belongs | | Name  | string (QName lexical space) | required | The name of the report element (of the form foo:Bar) | | Kind  | One of: Concept, Abstract, LineItems, Hypercube, Dimension, Member | optional | One of the six kinds of report element | | PeriodType  | One of: instant, duration | optional | Only allowed for the Concept kind. Indicates the period type (whether facts against this concept must have instant or duration periods). | | DataType | string (QName lexical space) | optional | Only allowed for the Concept kind. Indicates the data type (value facts against this concept must have). | | Balance | One of: credit, debit | optional | Only allowed for the Concept kind, and if the data type is monetary. Indicates the balance. | | IsNillable | boolean | optional | Only allowed for the Concept kind. Specifies whether null is accepted as a fact value. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the report-elements endpoint as input:  - Components (string) - IsAbstract (boolean) - BaseType (string) - ClosestSchemaBuiltinType (string) - IsTextBlock (boolean) - Labels (string) - Facts (string) - Labels (string) - Label (string) - Section (string) - CIK (string) - EntityRegistrantName (string) - FiscalYear (integer) - FiscalPeriod (string)  For report elements with the kind Concept, the data type must be one of the following:  - xbrli:decimalItemType - xbrli:floatItemType - xbrli:doubleItemType - xbrli:integerItemType - xbrli:positiveIntegerItemType - xbrli:nonPositiveIntegerItemType - xbrli:nonNegativeIntegerItemType - xbrli:negativeIntegershortItemType - xbrli:byteItemType - xbrli:intItemType - xbrli:longItemType - xbrli:unsignedShorItemType - xbrli:unsignedByteItemType - xbrli:unsignedIntItemType - xbrli:unsignedLongItemType - xbrli:stringItemType (implied/only one allowed for Hypercube, Dimension, LineItems and Abstract kinds) - xbrli:booleanItemType - xbrli:hexBinaryItemType - xbrli:base64BinaryItemType - xbrli:anyURIItemType - xbrli:QNameItemType - xbrli:durationItemType - xbrli:timeItemType - xbrli:dateItemType - xbrli:gYearMonthItemType - xbrli:gYearItemType - xbrli:gMonthItemType - xbrli:gMonthDayItemType - xbrli:gDayItemType - xbrli:normalizedStringItemType - xbrli:tokenItemType - xbrli:languageItemType - xbrli:NameItemType - xbrli:NCNameItemType - xbrli:monetaryItemType (allows Balance) - xbrli:pureItemType - xbrli:sharesItemType - xbrli:fractionItemType - nonnum:domainItemType (implied/only one allowed for Member kind) - nonnum:escapedItemType - nonnum:xmlNodesItemType - nonnum:xmlItemType - nonnum:textBlockItemType - num:percentItemType - num:perShareItemType - num:areaItemType - num:volumeItemType - num:massItemType - num:weightItemType - num:energyItemType - num:powerItemType - num:lengthItemType - num:noDecimalsMonetaryItemType (allows Balance) - num:nonNegativeMonetaryItemType (allows Balance) - num:nonNegativeNoDecimalsMonetaryItemType (allows Balance) - num:enumerationItemType  Several report elements can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="reportElement">The report element objects, which must be supplied in the body of the request, and which must satisfy the constraints described in the field table.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReportElementsAsyncWithHttpInfo (string token, Object reportElement)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddReportElements");
            // verify the required parameter 'reportElement' is set
            if (reportElement == null)
                throw new ApiException(400, "Missing required parameter 'reportElement' when calling DataApi->AddReportElements");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (reportElement != null && reportElement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportElement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportElement; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReportElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Object</returns>
        public Object AddRules (string token, Object rules)
        {
             ApiResponse<Object> localVarResponse = AddRulesWithHttpInfo(token, rules);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddRulesWithHttpInfo (string token, Object rules)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddRules");
            // verify the required parameter 'rules' is set
            if (rules == null)
                throw new ApiException(400, "Missing required parameter 'rules' when calling DataApi->AddRules");

            var localVarPath = "/api/rules";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (rules != null && rules.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rules); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rules; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddRulesAsync (string token, Object rules)
        {
             ApiResponse<Object> localVarResponse = await AddRulesAsyncWithHttpInfo(token, rules);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="rules">The rule objects.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddRulesAsyncWithHttpInfo (string token, Object rules)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddRules");
            // verify the required parameter 'rules' is set
            if (rules == null)
                throw new ApiException(400, "Missing required parameter 'rules' when calling DataApi->AddRules");

            var localVarPath = "/api/rules";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (rules != null && rules.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rules); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rules; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object AddSections (string token, Object section, string profileName = null)
        {
             ApiResponse<Object> localVarResponse = AddSectionsWithHttpInfo(token, section, profileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddSectionsWithHttpInfo (string token, Object section, string profileName = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddSections");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling DataApi->AddSections");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (section != null && section.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(section); // http body (model) parameter
            }
            else
            {
                localVarPostBody = section; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddSectionsAsync (string token, Object section, string profileName = null)
        {
             ApiResponse<Object> localVarResponse = await AddSectionsAsyncWithHttpInfo(token, section, profileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update sections. A section is identified with an Archive ID (AID) and a section URI.  A section can be created by submitting a JSON object containing general information about the section. This JSON object must be valid agains a JSound schema. It can be either taken from the output of a GET request to the same endpoint (in which case it will be valid), or created manually.  For convenience, we offer a user-friendly summary of the fields involved. The JSound schema is available on request.  #### Body properties  | Field | Type | Presence | Content | |- -- -- --|- -- -- -|- -- -- -- -- -|- -- -- -- --| | AID | string | required | The AID of the archive to which the section belongs | | SectionURI   | string | required | The URI of the section | | Section  | string | required | A user-friendly label for the section (preferably in English). | | Profiles | object | optional | Maps profile names to additional profile-specific information. The profile-specific information must have a Name field containing the profile name, that is, identical to its key. The other fields in the profile information is not restricted. |  Additionally, the following fields are allowed for the purpose of feeding back the output of the sections endpoint as input:  - Components (string) - ReportElements (string) - FactTable (string) - Spreadsheet (string) - Category (string) - SubCategory (string) - Disclosure (string) - NumRules (integer) - NumReportElements (integer) - NumHypercubes (integer) - NumDimensions (integer) - NumMembers (integer) - NumLineItems (integer) - NumAbstracts (integer) - NumConcepts (integer) - EntityRegistrantName (string) - CIK (string) - FiscalYear (integer) - FiscalPeriod (string) - AcceptanceDatetime (string) - FormType (string)  Several empty sections can be created at the same time by posting a sequence of non-comma-separated JSON objects as above.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="section">The section objects (they must be valid).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSectionsAsyncWithHttpInfo (string token, Object section, string profileName = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddSections");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling DataApi->AddSections");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */
            if (section != null && section.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(section); // http body (model) parameter
            }
            else
            {
                localVarPostBody = section; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID).  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Object</returns>
        public Object AddTaxonomy (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null)
        {
             ApiResponse<Object> localVarResponse = AddTaxonomyWithHttpInfo(token, eid, entrypoint, profileName, aid, insertEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID).  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddTaxonomyWithHttpInfo (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddTaxonomy");
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling DataApi->AddTaxonomy");
            // verify the required parameter 'entrypoint' is set
            if (entrypoint == null)
                throw new ApiException(400, "Missing required parameter 'entrypoint' when calling DataApi->AddTaxonomy");

            var localVarPath = "/api/taxonomies";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (entrypoint != null) localVarQueryParams.Add("entrypoint", Configuration.ApiClient.ParameterToString(entrypoint)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaxonomy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID).  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddTaxonomyAsync (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null)
        {
             ApiResponse<Object> localVarResponse = await AddTaxonomyAsyncWithHttpInfo(token, eid, entrypoint, profileName, aid, insertEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new taxonomy archive given one or more entrypoints. The taxonomy archive is identified with an Archive ID (AID).  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="eid">The EID (scheme + local name) of a company, to add a new taxonomy.</param>
        /// <param name="entrypoint">The URI of a taxonomy entrypoint.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and one or more of the archive entities are not present in the repository an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddTaxonomyAsyncWithHttpInfo (string token, string eid, List<string> entrypoint, string profileName = null, string aid = null, bool? insertEntity = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->AddTaxonomy");
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling DataApi->AddTaxonomy");
            // verify the required parameter 'entrypoint' is set
            if (entrypoint == null)
                throw new ApiException(400, "Missing required parameter 'entrypoint' when calling DataApi->AddTaxonomy");

            var localVarPath = "/api/taxonomies";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (entrypoint != null) localVarQueryParams.Add("entrypoint", Configuration.ApiClient.ParameterToString(entrypoint)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaxonomy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Object</returns>
        public Object CopyArchive (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null)
        {
             ApiResponse<Object> localVarResponse = CopyArchiveWithHttpInfo(token, fromAid, aid, eid, insertEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CopyArchiveWithHttpInfo (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->CopyArchive");
            // verify the required parameter 'fromAid' is set
            if (fromAid == null)
                throw new ApiException(400, "Missing required parameter 'fromAid' when calling DataApi->CopyArchive");

            var localVarPath = "/api/archives/copy";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (fromAid != null) localVarQueryParams.Add("from-aid", Configuration.ApiClient.ParameterToString(fromAid)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CopyArchiveAsync (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null)
        {
             ApiResponse<Object> localVarResponse = await CopyArchiveAsyncWithHttpInfo(token, fromAid, aid, eid, insertEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies an existing archive. The new archive copy will retain all the data (components, report-elements, facts, footnotes) of the copied archive and will have a new Archive ID. Optionally a new Entity ID for the copied archive can be specified.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="fromAid">Archive ID of the archive or taxonomy to copy.</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="insertEntity">If false, and the specified new Entity ID is not present in the Cellstore an error is raised. If true, the missing entity is inserted. (Default is true) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CopyArchiveAsyncWithHttpInfo (string token, string fromAid, string aid = null, string eid = null, bool? insertEntity = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->CopyArchive");
            // verify the required parameter 'fromAid' is set
            if (fromAid == null)
                throw new ApiException(400, "Missing required parameter 'fromAid' when calling DataApi->CopyArchive");

            var localVarPath = "/api/archives/copy";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (fromAid != null) localVarQueryParams.Add("from-aid", Configuration.ApiClient.ParameterToString(fromAid)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (insertEntity != null) localVarQueryParams.Add("insert-entity", Configuration.ApiClient.ParameterToString(insertEntity)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes an archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteArchive (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
             ApiResponse<Object> localVarResponse = DeleteArchiveWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteArchiveWithHttpInfo (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteArchive");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes an archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteArchiveAsync (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteArchiveAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an archive. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArchiveAsyncWithHttpInfo (string token, string profileName = null, string aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteArchive");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes an entity. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteEntity (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null)
        {
             ApiResponse<Object> localVarResponse = DeleteEntityWithHttpInfo(token, profileName, eid, cik, edinetcode, ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an entity. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteEntityWithHttpInfo (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteEntity");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes an entity. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEntityAsync (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteEntityAsyncWithHttpInfo(token, profileName, eid, cik, edinetcode, ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an entity. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EID (scheme + local name) of a company. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntityAsyncWithHttpInfo (string token, string profileName = null, string eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> ticker = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteEntity");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a label. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteLabel (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null)
        {
             ApiResponse<Object> localVarResponse = DeleteLabelWithHttpInfo(token, profileName, aid, section, reportElement, language, labelRole);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a label. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteLabelWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteLabel");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (labelRole != null) localVarQueryParams.Add("labelRole", Configuration.ApiClient.ParameterToString(labelRole)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a label. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteLabelAsync (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteLabelAsyncWithHttpInfo(token, profileName, aid, section, reportElement, language, labelRole);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a label. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLabelAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null, string language = null, List<string> labelRole = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteLabel");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (labelRole != null) localVarQueryParams.Add("labelRole", Configuration.ApiClient.ParameterToString(labelRole)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a component including its model structure. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteModelStructureForComponent (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null)
        {
             ApiResponse<Object> localVarResponse = DeleteModelStructureForComponentWithHttpInfo(token, aid, section, hypercube);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a component including its model structure. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteModelStructureForComponentWithHttpInfo (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a component including its model structure. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteModelStructureForComponentAsync (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteModelStructureForComponentAsyncWithHttpInfo(token, aid, section, hypercube);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a component including its model structure. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelStructureForComponentAsyncWithHttpInfo (string token, List<string> aid = null, List<string> section = null, List<string> hypercube = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a report element. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteReportElement (string token, string profileName = null, string aid = null, string section = null, string reportElement = null)
        {
             ApiResponse<Object> localVarResponse = DeleteReportElementWithHttpInfo(token, profileName, aid, section, reportElement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a report element. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteReportElementWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteReportElement");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReportElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a report element. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteReportElementAsync (string token, string profileName = null, string aid = null, string section = null, string reportElement = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteReportElementAsyncWithHttpInfo(token, profileName, aid, section, reportElement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a report element. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportElementAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null, string reportElement = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteReportElement");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReportElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a section. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object DeleteSection (string token, string profileName = null, string aid = null, string section = null)
        {
             ApiResponse<Object> localVarResponse = DeleteSectionWithHttpInfo(token, profileName, aid, section);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a section. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteSectionWithHttpInfo (string token, string profileName = null, string aid = null, string section = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteSection");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a section. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSectionAsync (string token, string profileName = null, string aid = null, string section = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteSectionAsyncWithHttpInfo(token, profileName, aid, section);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a section. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive ID of the archive or taxonomy. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSectionAsyncWithHttpInfo (string token, string profileName = null, string aid = null, string section = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->DeleteSection");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update one or more archives with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object EditArchives (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
             ApiResponse<Object> localVarResponse = EditArchivesWithHttpInfo(token, patch, profileName, aid, entityTag, eid, cik, edinetcode, sic, ticker, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one or more archives with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > EditArchivesWithHttpInfo (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditArchives");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            /* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update one or more archives with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EditArchivesAsync (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
             ApiResponse<Object> localVarResponse = await EditArchivesAsyncWithHttpInfo(token, patch, profileName, aid, entityTag, eid, cik, edinetcode, sic, ticker, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one or more archives with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each archive (the archive objects must be valid after applying it).  Updating the AID of an archive is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditArchivesAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> aid = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditArchives");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            /* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update one or more entities with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object EditEntities (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null)
        {
             ApiResponse<Object> localVarResponse = EditEntitiesWithHttpInfo(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one or more entities with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > EditEntitiesWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditEntities");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            /* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update one or more entities with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EditEntitiesAsync (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null)
        {
             ApiResponse<Object> localVarResponse = await EditEntitiesAsyncWithHttpInfo(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one or more entities with partial information 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each entity (the entities must be valid after applying it).  Updating the EID of an entity is not allowed. </param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditEntitiesAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditEntities");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            /* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Patch one or more facts 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object EditFacts (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null)
        {
             ApiResponse<Object> localVarResponse = EditFactsWithHttpInfo(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker, aid, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch one or more facts 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > EditFactsWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditFacts");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (map != null) localVarQueryParams.Add("map", Configuration.ApiClient.ParameterToString(map)); // query parameter
            if (rule != null) localVarQueryParams.Add("rule", Configuration.ApiClient.ParameterToString(rule)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionTypes != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionTypes, "^[^:]+:[^:]+::type$", localVarQueryParams); // pattern query parameter
if (defaultDimensionValues != null) Configuration.ApiClient.AddPatternQueryParameters(defaultDimensionValues, "^[^:]+:[^:]+::default$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
if (dimensionColumns != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionColumns, "^[^:]+:[^:]+::column$", localVarQueryParams); // pattern query parameter
if (dimensionAggregation != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionAggregation, "^[^:]+:[^:]+::aggregation$", localVarQueryParams); // pattern query parameter
/* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Patch one or more facts 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EditFactsAsync (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null)
        {
             ApiResponse<Object> localVarResponse = await EditFactsAsyncWithHttpInfo(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker, aid, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch one or more facts 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="patch">The patch object, which will be merged into each facts (the facts must be valid after applying it).</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditFactsAsyncWithHttpInfo (string token, Object patch, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, List<string> aid = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->EditFacts");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling DataApi->EditFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (map != null) localVarQueryParams.Add("map", Configuration.ApiClient.ParameterToString(map)); // query parameter
            if (rule != null) localVarQueryParams.Add("rule", Configuration.ApiClient.ParameterToString(rule)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionTypes != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionTypes, "^[^:]+:[^:]+::type$", localVarQueryParams); // pattern query parameter
if (defaultDimensionValues != null) Configuration.ApiClient.AddPatternQueryParameters(defaultDimensionValues, "^[^:]+:[^:]+::default$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
if (dimensionColumns != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionColumns, "^[^:]+:[^:]+::column$", localVarQueryParams); // pattern query parameter
if (dimensionAggregation != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionAggregation, "^[^:]+:[^:]+::aggregation$", localVarQueryParams); // pattern query parameter
/* 28msec */
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetArchives (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetArchivesWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, language, dts, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetArchivesWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (dts != null) localVarQueryParams.Add("dts", Configuration.ApiClient.ParameterToString(dts)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetArchivesAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetArchivesAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, language, dts, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve metadata about the archives, also called archives. The archives are identified with Archive IDs (AIDs). Facts can be bound with archives with the xbrl28:Archive aspect, whose values are AIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="dts">Whether DTS and entrypoint information should be included for each archive (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArchivesAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, string language = null, bool? dts = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetArchives");

            var localVarPath = "/api/archives";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (dts != null) localVarQueryParams.Add("dts", Configuration.ApiClient.ParameterToString(dts)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchives", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all components of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetComponents (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null)
        {
             ApiResponse<Object> localVarResponse = GetComponentsWithHttpInfo(token, profileName, eid, ticker, entityTag, sic, cik, edinetcode, archiveFiscalYear, archiveFiscalPeriod, archiveTag, aid, section, hypercube, disclosure, reportElement, label, count, top, skip, validate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary for all components of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetComponentsWithHttpInfo (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetComponents");

            var localVarPath = "/api/components";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all components of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetComponentsAsync (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null)
        {
             ApiResponse<Object> localVarResponse = await GetComponentsAsyncWithHttpInfo(token, profileName, eid, ticker, entityTag, sic, cik, edinetcode, archiveFiscalYear, archiveFiscalPeriod, archiveTag, aid, section, hypercube, disclosure, reportElement, label, count, top, skip, validate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a summary for all components of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetComponentsAsyncWithHttpInfo (string token, string profileName = null, List<string> eid = null, List<string> ticker = null, List<string> entityTag = null, List<string> sic = null, List<string> cik = null, List<string> edinetcode = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> aid = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null, bool? validate = null, string language = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetComponents");

            var localVarPath = "/api/components";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetDataPointsForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetDataPointsForComponentWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, labels, metadata, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, merge, language, _override, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetDataPointsForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetDataPointsForComponent");

            var localVarPath = "/api/data-points-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataPointsForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetDataPointsForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetDataPointsForComponentAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, labels, metadata, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, merge, language, _override, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the data points for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDataPointsForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? labels = null, bool? metadata = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetDataPointsForComponent");

            var localVarPath = "/api/data-points-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataPointsForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetEntities (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetEntitiesWithHttpInfo(token, profileName, entityTag, eid, cik, edinetcode, sic, ticker, entitySearch, entitySearchOffset, entitySearchLimit, language, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetEntitiesWithHttpInfo (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (entitySearch != null) localVarQueryParams.Add("entity-search", Configuration.ApiClient.ParameterToString(entitySearch)); // query parameter
            if (entitySearchOffset != null) localVarQueryParams.Add("entity-search-offset", Configuration.ApiClient.ParameterToString(entitySearchOffset)); // query parameter
            if (entitySearchLimit != null) localVarQueryParams.Add("entity-search-limit", Configuration.ApiClient.ParameterToString(entitySearchLimit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEntitiesAsync (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetEntitiesAsyncWithHttpInfo(token, profileName, entityTag, eid, cik, edinetcode, sic, ticker, entitySearch, entitySearchOffset, entitySearchLimit, language, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve metadata about the entities that submit archives. These entities are also referred to by facts with the xbrl:Entity aspect, of which the values are called Entity IDs (EIDs). One entity might have several EIDs. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entitySearch">Includes in the results the entities whose name match this full-text query (optional, default to null)</param>
        /// <param name="entitySearchOffset">Includes in the results the entities whose name match the entity-search parameter skipping the first entity-search-offset results (default: 0) (optional, default to null)</param>
        /// <param name="entitySearchLimit">Includes in the results the entities whose name match the entity-search parameter limited to a maximum of entity-search-limit results (default: 10) (optional, default to null)</param>
        /// <param name="language">Specifies in which language to perform the entity-search query (default: en-US) (optional, default to en-US)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEntitiesAsyncWithHttpInfo (string token, string profileName = null, List<string> entityTag = null, List<string> eid = null, List<string> cik = null, List<string> edinetcode = null, List<string> sic = null, List<string> ticker = null, string entitySearch = null, int? entitySearchOffset = null, int? entitySearchLimit = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetEntities");

            var localVarPath = "/api/entities";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (entitySearch != null) localVarQueryParams.Add("entity-search", Configuration.ApiClient.ParameterToString(entitySearch)); // query parameter
            if (entitySearchOffset != null) localVarQueryParams.Add("entity-search-offset", Configuration.ApiClient.ParameterToString(entitySearchOffset)); // query parameter
            if (entitySearchLimit != null) localVarQueryParams.Add("entity-search-limit", Configuration.ApiClient.ParameterToString(entitySearchLimit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetFactTableForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetFactTableForComponentWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetFactTableForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFactTableForComponent");

            var localVarPath = "/api/facttable-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactTableForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFactTableForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetFactTableForComponentAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the fact table for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFactTableForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> archiveTag = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFactTableForComponent");

            var localVarPath = "/api/facttable-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactTableForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetFactTableForReport (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetFactTableForReportWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, open, report, labels, metadata, auditTrails, language, aggregationFunction, validate, _override, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetFactTableForReportWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFactTableForReport");

            var localVarPath = "/api/facttable-for-report";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactTableForReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFactTableForReportAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetFactTableForReportAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, open, report, labels, metadata, auditTrails, language, aggregationFunction, validate, _override, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the fact table for a given report. Filters can be overriden. Filters MUST be overriden if the report is not already filtering. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFactTableForReportAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? open = null, string report = null, bool? labels = null, bool? metadata = null, string auditTrails = null, string language = null, string aggregationFunction = null, bool? validate = null, bool? _override = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFactTableForReport");

            var localVarPath = "/api/facttable-for-report";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactTableForReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve one or more facts for a combination of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetFacts (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetFactsWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more facts for a combination of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetFactsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (map != null) localVarQueryParams.Add("map", Configuration.ApiClient.ParameterToString(map)); // query parameter
            if (rule != null) localVarQueryParams.Add("rule", Configuration.ApiClient.ParameterToString(rule)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionTypes != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionTypes, "^[^:]+:[^:]+::type$", localVarQueryParams); // pattern query parameter
if (defaultDimensionValues != null) Configuration.ApiClient.AddPatternQueryParameters(defaultDimensionValues, "^[^:]+:[^:]+::default$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
if (dimensionColumns != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionColumns, "^[^:]+:[^:]+::column$", localVarQueryParams); // pattern query parameter
if (dimensionAggregation != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionAggregation, "^[^:]+:[^:]+::aggregation$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve one or more facts for a combination of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFactsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetFactsAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more facts for a combination of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="map">[Deprecated, use report] The concept map that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="rule">[Deprecated, use report] The rules that should be used to resolve the concept (default: none). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="labels">Whether human-readable labels should be included for concepts in each fact (default: false). (optional, default to false)</param>
        /// <param name="metadata">Whether metadata about the facts concept and dimensions should be included in each fact (default: false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionTypes">Sets the given dimensions to be typed dimensions with the specified type (Default: xbrl:Entity/xbrl:Period/xbrl:Unit/xbrl28:Archive are typed string, others are explicit dimensions; Some further dimensions may have default types depending on the profile). Each key is in the form prefix:dimension::type, each value is a string. (optional, default to null)</param>
        /// <param name="defaultDimensionValues">Specifies the default value of the given dimensions that should be returned if the dimension was not provided explicitly for a fact. Each key is in the form  prefix:dimension::default, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="dimensionColumns">If the dimension is visible in the output, specifies the position at which it appears in the output fact table (default: arbitrary order). (optional, default to null)</param>
        /// <param name="dimensionAggregation">[Deprecated] Specifies whether this dimension is a dicer (&#39;group&#39;) or not (&#39;no&#39;). If a dicer, facts will be grouped along this dimension before applying the supplied aggregation function. By default, all key aspects, except those explicitly specified as slicers, are dicers (&#39;group&#39;) and non-key aspects are not (&#39;no&#39;). Has no effect if no aggregation function is supplied, or if the dimension is explicitly specified as a slicer. (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFactsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string map = null, string rule = null, string report = null, string additionalRules = null, bool? labels = null, bool? metadata = null, string auditTrails = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionTypes = null, Dictionary<string, string> defaultDimensionValues = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, Dictionary<string, int?> dimensionColumns = null, Dictionary<string, string> dimensionAggregation = null, string aggregationFunction = null, bool? validate = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetFacts");

            var localVarPath = "/api/facts";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (map != null) localVarQueryParams.Add("map", Configuration.ApiClient.ParameterToString(map)); // query parameter
            if (rule != null) localVarQueryParams.Add("rule", Configuration.ApiClient.ParameterToString(rule)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (labels != null) localVarQueryParams.Add("labels", Configuration.ApiClient.ParameterToString(labels)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionTypes != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionTypes, "^[^:]+:[^:]+::type$", localVarQueryParams); // pattern query parameter
if (defaultDimensionValues != null) Configuration.ApiClient.AddPatternQueryParameters(defaultDimensionValues, "^[^:]+:[^:]+::default$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
if (dimensionColumns != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionColumns, "^[^:]+:[^:]+::column$", localVarQueryParams); // pattern query parameter
if (dimensionAggregation != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionAggregation, "^[^:]+:[^:]+::aggregation$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve labels for the supplied components and report elements 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetLabels (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetLabelsWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, labelRole, onlyTextBlocks, kind, eliminateReportElementDuplicates, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve labels for the supplied components and report elements 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetLabelsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetLabels");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (labelRole != null) localVarQueryParams.Add("labelRole", Configuration.ApiClient.ParameterToString(labelRole)); // query parameter
            if (onlyTextBlocks != null) localVarQueryParams.Add("onlyTextBlocks", Configuration.ApiClient.ParameterToString(onlyTextBlocks)); // query parameter
            if (kind != null) localVarQueryParams.Add("kind", Configuration.ApiClient.ParameterToString(kind)); // query parameter
            if (eliminateReportElementDuplicates != null) localVarQueryParams.Add("eliminateReportElementDuplicates", Configuration.ApiClient.ParameterToString(eliminateReportElementDuplicates)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve labels for the supplied components and report elements 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLabelsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetLabelsAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, labelRole, onlyTextBlocks, kind, eliminateReportElementDuplicates, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve labels for the supplied components and report elements 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="labelRole">A label role (default: no filtering by label role). A more comprehensive list of label roles can be found in the [XBRL Standard](http://www.xbrl.org/Specification/XBRL-2.1/REC-2003-12-31/XBRL-2.1-REC-2003-12-31+corrected-errata-2013-02-20.html#Standard-label-role-attribute-values). (optional, default to null)</param>
        /// <param name="onlyTextBlocks">If set to true only labels for concepts defined as textBlockItemType are returned (default: false). (optional, default to false)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="eliminateReportElementDuplicates">Whether to eliminate (concept name, language, label role) duplicates. By default no duplicate elimination (optional, default to true)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLabelsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, List<string> labelRole = null, bool? onlyTextBlocks = null, List<string> kind = null, bool? eliminateReportElementDuplicates = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetLabels");

            var localVarPath = "/api/labels";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (labelRole != null) localVarQueryParams.Add("labelRole", Configuration.ApiClient.ParameterToString(labelRole)); // query parameter
            if (onlyTextBlocks != null) localVarQueryParams.Add("onlyTextBlocks", Configuration.ApiClient.ParameterToString(onlyTextBlocks)); // query parameter
            if (kind != null) localVarQueryParams.Add("kind", Configuration.ApiClient.ParameterToString(kind)); // query parameter
            if (eliminateReportElementDuplicates != null) localVarQueryParams.Add("eliminateReportElementDuplicates", Configuration.ApiClient.ParameterToString(eliminateReportElementDuplicates)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetModelStructureForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetModelStructureForComponentWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, indent, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetModelStructureForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (indent != null) localVarQueryParams.Add("indent", Configuration.ApiClient.ParameterToString(indent)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetModelStructureForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetModelStructureForComponentAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, indent, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the model structure for a given component. A component can be selected in several ways, for example with an accession number (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="indent">If set to true all labels will be prepended with 8 space characters for each level of depth within the model structure (default: false). (optional, default to false)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetModelStructureForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string language = null, bool? indent = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetModelStructureForComponent");

            var localVarPath = "/api/modelstructure-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (indent != null) localVarQueryParams.Add("indent", Configuration.ApiClient.ParameterToString(indent)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelStructureForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetPeriods (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetPeriodsWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetPeriodsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetPeriods");

            var localVarPath = "/api/periods";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeriods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPeriodsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetPeriodsAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the periods of the archives filed by a particular entity 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPeriodsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetPeriods");

            var localVarPath = "/api/periods";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeriods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the report elements contained in a set of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetReportElements (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetReportElementsWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, builtin, onlyNames, report, label, onlyTextBlocks, kind, language, contentType, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the report elements contained in a set of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetReportElementsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetReportElements");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (builtin != null) localVarQueryParams.Add("builtin", Configuration.ApiClient.ParameterToString(builtin)); // query parameter
            if (onlyNames != null) localVarQueryParams.Add("onlyNames", Configuration.ApiClient.ParameterToString(onlyNames)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (onlyTextBlocks != null) localVarQueryParams.Add("onlyTextBlocks", Configuration.ApiClient.ParameterToString(onlyTextBlocks)); // query parameter
            if (kind != null) localVarQueryParams.Add("kind", Configuration.ApiClient.ParameterToString(kind)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
                        if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.SingleParameterToString(contentType)); // header parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the report elements contained in a set of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetReportElementsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetReportElementsAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, builtin, onlyNames, report, label, onlyTextBlocks, kind, language, contentType, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the report elements contained in a set of archives. 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve labels. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="builtin">Whether to include built-in report elements (false by default). (optional, default to false)</param>
        /// <param name="onlyNames">Whether only the names of the report elements should be returned. If so, the values don&#39;t contain duplicates. (default: false) (optional, default to false)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of report elements (e.g. stock) (optional, default to null)</param>
        /// <param name="onlyTextBlocks">Filters by text block/not text block (default: no filtering) (optional, default to null)</param>
        /// <param name="kind">Filters by concept kind (default: no filtering) (optional, default to null)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="contentType">Content-Type of the request (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReportElementsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, bool? builtin = null, bool? onlyNames = null, string report = null, List<string> label = null, bool? onlyTextBlocks = null, List<string> kind = null, string language = null, string contentType = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetReportElements");

            var localVarPath = "/api/report-elements";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (builtin != null) localVarQueryParams.Add("builtin", Configuration.ApiClient.ParameterToString(builtin)); // query parameter
            if (onlyNames != null) localVarQueryParams.Add("onlyNames", Configuration.ApiClient.ParameterToString(onlyNames)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (onlyTextBlocks != null) localVarQueryParams.Add("onlyTextBlocks", Configuration.ApiClient.ParameterToString(onlyTextBlocks)); // query parameter
            if (kind != null) localVarQueryParams.Add("kind", Configuration.ApiClient.ParameterToString(kind)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
                        if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.SingleParameterToString(contentType)); // header parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all rules of a given section 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetRules (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetRulesWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, disclosure, reportElement, label, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary for all rules of a given section 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetRulesWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetRules");

            var localVarPath = "/api/rules";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all rules of a given section 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetRulesAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetRulesAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, disclosure, reportElement, label, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a summary for all rules of a given section 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRulesAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetRules");

            var localVarPath = "/api/rules";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all sections of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetSections (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = GetSectionsWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, validate, language, count, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary for all sections of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSectionsWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSections");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve a summary for all sections of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSectionsAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await GetSectionsAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, validate, language, count, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a summary for all sections of a given archive 
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="validate">Whether to run validation on the output components (default: false). Adds a column ValidationErrors (optional, default to false)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="count">If true, only outputs statistics (default: false). (optional, default to false)</param>
        /// <param name="top">Output only the first [top] results (default: no limit). (optional, default to null)</param>
        /// <param name="skip">Skip the first [skip] results. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSectionsAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, List<string> archiveTag = null, List<string> section = null, List<string> hypercube = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, bool? validate = null, string language = null, bool? count = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSections");

            var localVarPath = "/api/sections";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            /* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Object</returns>
        public Object GetSpreadsheetForComponent (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null)
        {
             ApiResponse<Object> localVarResponse = GetSpreadsheetForComponentWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, auditTrails, open, archiveTag, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, eliminate, eliminationThreshold, populate, autoSlice, row, column, flattenRowHeaders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSpreadsheetForComponentWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSpreadsheetForComponent");

            var localVarPath = "/api/spreadsheet-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (eliminate != null) localVarQueryParams.Add("eliminate", Configuration.ApiClient.ParameterToString(eliminate)); // query parameter
            if (eliminationThreshold != null) localVarQueryParams.Add("elimination-threshold", Configuration.ApiClient.ParameterToString(eliminationThreshold)); // query parameter
            if (populate != null) localVarQueryParams.Add("populate", Configuration.ApiClient.ParameterToString(populate)); // query parameter
            if (autoSlice != null) localVarQueryParams.Add("auto-slice", Configuration.ApiClient.ParameterToString(autoSlice)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (flattenRowHeaders != null) localVarQueryParams.Add("flatten-row-headers", Configuration.ApiClient.ParameterToString(flattenRowHeaders)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpreadsheetForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSpreadsheetForComponentAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null)
        {
             ApiResponse<Object> localVarResponse = await GetSpreadsheetForComponentAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, auditTrails, open, archiveTag, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, eliminate, eliminationThreshold, populate, autoSlice, row, column, flattenRowHeaders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a given component.  A component can be selected in several ways, for example with an Archive ID (AID), section URI and hypercube name, or with a CIK, fiscal year, fiscal period, and disclosure, etc.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="section">The URI of a particular section, to retrieve a section, component or report element. (optional, default to null)</param>
        /// <param name="hypercube">The name of a hypercube report element, to retrieve components / sections. (optional, default to null)</param>
        /// <param name="concept">The name of a concept to dice facts (a synonym for the dimension xbrl:Concept). (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="additionalRules">The name of a report from which to use rules in addition to a report&#39;s rules (e.g. FundamentalAccountingConcepts). (optional, default to null)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="disclosure">A disclosure, to identify sections or components (e.g. BalanceSheet). (optional, default to null)</param>
        /// <param name="reportElement">The name of the report element to search for, to retrieve a section, a component or a report element (e.g. us-gaap:Goodwill). (optional, default to null)</param>
        /// <param name="label">A search term to search in the labels of components, to retrieve components (e.g. stock). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="merge">Whether to merge components if multiple components are retrieved. By default, it is true. If false, a random component is selected if multiple are retrieved (default: true). (optional, default to true)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, but false if a definition model is defined in the component). (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="autoSlice">If set to true then slicers are automatically defined (default: true). (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSpreadsheetForComponentAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> section = null, List<string> hypercube = null, List<string> concept = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, string additionalRules = null, string auditTrails = null, bool? open = null, List<string> archiveTag = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, List<string> disclosure = null, List<string> reportElement = null, List<string> label = null, string aggregationFunction = null, bool? validate = null, bool? merge = null, string language = null, bool? _override = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, bool? autoSlice = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSpreadsheetForComponent");

            var localVarPath = "/api/spreadsheet-for-component";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (hypercube != null) localVarQueryParams.Add("hypercube", Configuration.ApiClient.ParameterToString(hypercube)); // query parameter
            if (concept != null) localVarQueryParams.Add("concept", Configuration.ApiClient.ParameterToString(concept)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (additionalRules != null) localVarQueryParams.Add("additional-rules", Configuration.ApiClient.ParameterToString(additionalRules)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (disclosure != null) localVarQueryParams.Add("disclosure", Configuration.ApiClient.ParameterToString(disclosure)); // query parameter
            if (reportElement != null) localVarQueryParams.Add("reportElement", Configuration.ApiClient.ParameterToString(reportElement)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (merge != null) localVarQueryParams.Add("merge", Configuration.ApiClient.ParameterToString(merge)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (eliminate != null) localVarQueryParams.Add("eliminate", Configuration.ApiClient.ParameterToString(eliminate)); // query parameter
            if (eliminationThreshold != null) localVarQueryParams.Add("elimination-threshold", Configuration.ApiClient.ParameterToString(eliminationThreshold)); // query parameter
            if (populate != null) localVarQueryParams.Add("populate", Configuration.ApiClient.ParameterToString(populate)); // query parameter
            if (autoSlice != null) localVarQueryParams.Add("auto-slice", Configuration.ApiClient.ParameterToString(autoSlice)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (flattenRowHeaders != null) localVarQueryParams.Add("flatten-row-headers", Configuration.ApiClient.ParameterToString(flattenRowHeaders)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpreadsheetForComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Object</returns>
        public Object GetSpreadsheetForReport (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null)
        {
             ApiResponse<Object> localVarResponse = GetSpreadsheetForReportWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, fiscalYear, fiscalPeriod, fiscalPeriodType, report, validate, auditTrails, language, eliminate, eliminationThreshold, populate, row, column, flattenRowHeaders, archiveTag, archiveFiscalYear, archiveFiscalPeriod, _override, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, aggregationFunction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSpreadsheetForReportWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSpreadsheetForReport");

            var localVarPath = "/api/spreadsheet-for-report";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (eliminate != null) localVarQueryParams.Add("eliminate", Configuration.ApiClient.ParameterToString(eliminate)); // query parameter
            if (eliminationThreshold != null) localVarQueryParams.Add("elimination-threshold", Configuration.ApiClient.ParameterToString(eliminationThreshold)); // query parameter
            if (populate != null) localVarQueryParams.Add("populate", Configuration.ApiClient.ParameterToString(populate)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (flattenRowHeaders != null) localVarQueryParams.Add("flatten-row-headers", Configuration.ApiClient.ParameterToString(flattenRowHeaders)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpreadsheetForReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSpreadsheetForReportAsync (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null)
        {
             ApiResponse<Object> localVarResponse = await GetSpreadsheetForReportAsyncWithHttpInfo(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, fiscalYear, fiscalPeriod, fiscalPeriodType, report, validate, auditTrails, language, eliminate, eliminationThreshold, populate, row, column, flattenRowHeaders, archiveTag, archiveFiscalYear, archiveFiscalPeriod, _override, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, aggregationFunction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the business-friendly spreadsheet for a report.  Filters can be overriden. Filters MUST be overriden if the report is not already filtering.  
        /// </summary>
        /// <exception cref="CellStore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token that allows you to use this API. Gives you read (GET) and/or write (POST, DELETE, PATCH) credentials.</param>
        /// <param name="profileName">Specifies which profile to use, which will enable some parameters or modify hypercube queries accordingly. The default depends on the underlying repository (optional, default to null)</param>
        /// <param name="aid">Archive IDs, to retrieve archives, sections, components or slice facts. (optional, default to null)</param>
        /// <param name="eid">The EIDs (scheme + local name) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="cik">The CIK of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="ticker">The ticker of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="edinetcode">The EDINET code of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="entityTag">The tag of an entity (such as an index), to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="sic">The SIC (industry group) of a company, to retrieve entities, archives, sections, components or dice facts. (optional, default to null)</param>
        /// <param name="fiscalYear">A fiscal year to slice facts (a synonym for the dimension xbrl28:FiscalYear, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriod">A fiscal period to slice facts (a synonym for the dimension xbrl28:FiscalPeriod, default: no filtering). (optional, default to null)</param>
        /// <param name="fiscalPeriodType">A fiscal period type to slice facts (a synonym for the dimension xbrl28:FiscalPeriodType, default: no filtering). (optional, default to null)</param>
        /// <param name="report">The report to use as a context to retrieve the facts. In particular, concept maps and rules found in this report will be used. (default: none). (optional, default to null)</param>
        /// <param name="validate">Whether or not to stamp facts for validity (default is false). (optional, default to false)</param>
        /// <param name="auditTrails">Whether audit trails should be included in each fact (default: no). (optional, default to no)</param>
        /// <param name="language">A language code (default: en-US) for displaying labels. (optional, default to null)</param>
        /// <param name="eliminate">Whether to eliminate empty rows / columns (Default: true if no row / column parameter is used). (optional, default to null)</param>
        /// <param name="eliminationThreshold">When you eliminate, you can specify a threshold of elimination between 0 and 100. If the threshold is set to 0 (which is the default), only fully empty rows and columns are eliminated. With 100, everything is eliminated. With a value inbetween, say, 50, the rows and columns with less than 50% of filled cells are eliminated (Default: 0). (optional, default to 0)</param>
        /// <param name="populate">Whether to populate cells with facts (Default: true). If false, populate with metadata, that is, aspects and concept data type, period type, balance. (optional, default to true)</param>
        /// <param name="row">Filters the spreadsheet to display only the rows specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="column">Filters the spreadsheet to display only the columns specified (default: no filter). Deactivates elimination. (optional, default to null)</param>
        /// <param name="flattenRowHeaders">Whether to flatten row headers to single columns (Default: true). (optional, default to true)</param>
        /// <param name="archiveTag">The tag of the archive, to retrieve archives, sections, components or slice facts (default: no filtering). (optional, default to null)</param>
        /// <param name="archiveFiscalYear">The fiscal year focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="archiveFiscalPeriod">The fiscal period focus of the archive, to retrieve archives, sections, components or slice facts (default: ALL). (optional, default to ALL)</param>
        /// <param name="_override">Whether the static component or report hypercube should be tampered with using the same hypercube-building API as the facts endpoint (default: true if a profile is active, otherwise automatically activated). (optional, default to null)</param>
        /// <param name="open">Whether the hypercube query has open hypercube semantics, i.e., automatically stretches to accommodate for all found dimensions (default: false). (optional, default to false)</param>
        /// <param name="dimensions">A set of dimension names and values used for filtering. As a value, the value of the dimension or ALL can be provided if all facts with this dimension should be retrieved. Each key is in the form prefix:dimension, each value is a string. (optional, default to null)</param>
        /// <param name="dimensionsCategory">Specifies whether the dimension is a slicer, a dicer, or unchanged. If an aggregation function is specified, facts are aggregated along this dimension (default: unchanged). (optional, default to null)</param>
        /// <param name="dimensionsVisible">Specifies whether the dimension is visible in the output. Only applies to dimensions defined as slicers. Default: false for slicers, but always true for dicers. (optional, default to null)</param>
        /// <param name="dimensionSlicers">[Deprecated] Specifies whether the dimension is a slicer (true) or not (false). Slicer dimensions do not appear in the output fact table, and if an aggregation function is specified, facts are aggregated along this dimension (default: false). (optional, default to null)</param>
        /// <param name="aggregationFunction">Specify an aggregation function to aggregate facts. Will aggregate facts, grouped by dicers, but aggregated along slicers, with this function. (optional, default to null)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSpreadsheetForReportAsyncWithHttpInfo (string token, string profileName = null, List<string> aid = null, List<string> eid = null, List<string> cik = null, List<string> ticker = null, List<string> edinetcode = null, List<string> entityTag = null, List<string> sic = null, List<string> fiscalYear = null, List<string> fiscalPeriod = null, List<string> fiscalPeriodType = null, string report = null, bool? validate = null, string auditTrails = null, string language = null, bool? eliminate = null, int? eliminationThreshold = null, bool? populate = null, List<int?> row = null, List<int?> column = null, bool? flattenRowHeaders = null, List<string> archiveTag = null, List<string> archiveFiscalYear = null, List<string> archiveFiscalPeriod = null, bool? _override = null, bool? open = null, Dictionary<string, List<string>> dimensions = null, Dictionary<string, string> dimensionsCategory = null, Dictionary<string, bool?> dimensionsVisible = null, Dictionary<string, bool?> dimensionSlicers = null, string aggregationFunction = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling DataApi->GetSpreadsheetForReport");

            var localVarPath = "/api/spreadsheet-for-report";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

/* 28msec */
                        if (profileName != null) localVarQueryParams.Add("profile-name", Configuration.ApiClient.ParameterToString(profileName)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (aid != null) localVarQueryParams.Add("aid", Configuration.ApiClient.ParameterToString(aid)); // query parameter
            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter
            if (cik != null) localVarQueryParams.Add("cik", Configuration.ApiClient.ParameterToString(cik)); // query parameter
            if (ticker != null) localVarQueryParams.Add("ticker", Configuration.ApiClient.ParameterToString(ticker)); // query parameter
            if (edinetcode != null) localVarQueryParams.Add("edinetcode", Configuration.ApiClient.ParameterToString(edinetcode)); // query parameter
            if (entityTag != null) localVarQueryParams.Add("entity-tag", Configuration.ApiClient.ParameterToString(entityTag)); // query parameter
            if (sic != null) localVarQueryParams.Add("sic", Configuration.ApiClient.ParameterToString(sic)); // query parameter
            if (fiscalYear != null) localVarQueryParams.Add("fiscalYear", Configuration.ApiClient.ParameterToString(fiscalYear)); // query parameter
            if (fiscalPeriod != null) localVarQueryParams.Add("fiscalPeriod", Configuration.ApiClient.ParameterToString(fiscalPeriod)); // query parameter
            if (fiscalPeriodType != null) localVarQueryParams.Add("fiscalPeriodType", Configuration.ApiClient.ParameterToString(fiscalPeriodType)); // query parameter
            if (report != null) localVarQueryParams.Add("report", Configuration.ApiClient.ParameterToString(report)); // query parameter
            if (validate != null) localVarQueryParams.Add("validate", Configuration.ApiClient.ParameterToString(validate)); // query parameter
            if (auditTrails != null) localVarQueryParams.Add("audit-trails", Configuration.ApiClient.ParameterToString(auditTrails)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (eliminate != null) localVarQueryParams.Add("eliminate", Configuration.ApiClient.ParameterToString(eliminate)); // query parameter
            if (eliminationThreshold != null) localVarQueryParams.Add("elimination-threshold", Configuration.ApiClient.ParameterToString(eliminationThreshold)); // query parameter
            if (populate != null) localVarQueryParams.Add("populate", Configuration.ApiClient.ParameterToString(populate)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (flattenRowHeaders != null) localVarQueryParams.Add("flatten-row-headers", Configuration.ApiClient.ParameterToString(flattenRowHeaders)); // query parameter
            if (archiveTag != null) localVarQueryParams.Add("archive-tag", Configuration.ApiClient.ParameterToString(archiveTag)); // query parameter
            if (archiveFiscalYear != null) localVarQueryParams.Add("archiveFiscalYear", Configuration.ApiClient.ParameterToString(archiveFiscalYear)); // query parameter
            if (archiveFiscalPeriod != null) localVarQueryParams.Add("archiveFiscalPeriod", Configuration.ApiClient.ParameterToString(archiveFiscalPeriod)); // query parameter
            if (_override != null) localVarQueryParams.Add("override", Configuration.ApiClient.ParameterToString(_override)); // query parameter
            if (open != null) localVarQueryParams.Add("open", Configuration.ApiClient.ParameterToString(open)); // query parameter
            if (aggregationFunction != null) localVarQueryParams.Add("aggregation-function", Configuration.ApiClient.ParameterToString(aggregationFunction)); // query parameter
            if (dimensions != null) Configuration.ApiClient.AddPatternQueryParameters(dimensions, "^[^:]+:[^:]+$", localVarQueryParams); // pattern query parameter
if (dimensionsCategory != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsCategory, "^[^:]+:[^:]+::category$", localVarQueryParams); // pattern query parameter
if (dimensionsVisible != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionsVisible, "^[^:]+:[^:]+::visible$", localVarQueryParams); // pattern query parameter
if (dimensionSlicers != null) Configuration.ApiClient.AddPatternQueryParameters(dimensionSlicers, "^[^:]+:[^:]+::slicer$", localVarQueryParams); // pattern query parameter
/* 28msec */


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpreadsheetForReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
