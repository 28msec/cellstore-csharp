/* 
 * Cellstore API
 *
 * <h3>CellStore API</h3>
 *
 * OpenAPI spec version: vX.X.X
 * Contact: support@28.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CellStore.Client;
using CellStore.Api;

namespace CellStore.Test
{
    /// <summary>
    ///  Class for testing ReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReportsApiTests
    {
        private ReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReportsApi
            //Assert.IsInstanceOfType(typeof(ReportsApi), instance, "instance is a ReportsApi");
        }

        
        /// <summary>
        /// Test AddOrReplaceOrValidateReport
        /// </summary>
        [Test]
        public void AddOrReplaceOrValidateReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object report = null;
            //string token = null;
            //bool? publicRead = null;
            //bool? _private = null;
            //bool? validationOnly = null;
            //bool? import = null;
            //string id = null;
            //string label = null;
            //var response = instance.AddOrReplaceOrValidateReport(report, token, publicRead, _private, validationOnly, import, id, label);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetParameters
        /// </summary>
        [Test]
        public void GetParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parameter = null;
            //var response = instance.GetParameters(parameter);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetReports
        /// </summary>
        [Test]
        public void GetReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string id = null;
            //string user = null;
            //bool? publicRead = null;
            //bool? _private = null;
            //bool? export = null;
            //bool? onlyMetadata = null;
            //var response = instance.GetReports(token, id, user, publicRead, _private, export, onlyMetadata);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test RemoveReport
        /// </summary>
        [Test]
        public void RemoveReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string token = null;
            //instance.RemoveReport(id, token);
            
        }
        
    }

}
