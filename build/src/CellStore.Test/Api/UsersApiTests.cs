/* 
 * Cellstore API
 *
 * <h3>CellStore API</h3>
 *
 * OpenAPI spec version: vX.X.X
 * Contact: support@28.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CellStore.Client;
using CellStore.Api;
using CellStore.Model;

namespace CellStore.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test EditUser
        /// </summary>
        [Test]
        public void EditUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstname = null;
            //string lastname = null;
            //string token = null;
            //string newemail = null;
            //string email = null;
            //string password = null;
            //string format = null;
            //var response = instance.EditUser(firstname, lastname, token, newemail, email, password, format);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
        /// <summary>
        /// Test ForgotPassword
        /// </summary>
        [Test]
        public void ForgotPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string format = null;
            //var response = instance.ForgotPassword(email, format);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string userid = null;
            //string email = null;
            //var response = instance.GetUser(token, userid, email);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test IsAuthorized
        /// </summary>
        [Test]
        public void IsAuthorizedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string right = null;
            //string token = null;
            //var response = instance.IsAuthorized(right, token);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
        /// <summary>
        /// Test NewUser
        /// </summary>
        [Test]
        public void NewUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstname = null;
            //string lastname = null;
            //string email = null;
            //string password = null;
            //var response = instance.NewUser(firstname, lastname, email, password);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Test]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string newpassword = null;
            //string email = null;
            //string password = null;
            //string token = null;
            //var response = instance.ResetPassword(newpassword, email, password, token);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
        /// <summary>
        /// Test SetPassword
        /// </summary>
        [Test]
        public void SetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string password = null;
            //string resetToken = null;
            //string format = null;
            //var response = instance.SetPassword(email, password, resetToken, format);
            //Assert.IsInstanceOf<Outcome> (response, "response is Outcome");
        }
        
    }

}
