/* 
 * Cellstore API
 *
 * <h3>CellStore API</h3>
 *
 * OpenAPI spec version: vX.X.X
 * Contact: support@28.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CellStore.Client;
using CellStore.Api;

namespace CellStore.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataApi
            //Assert.IsInstanceOfType(typeof(DataApi), instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test AddArchives
        /// </summary>
        [Test]
        public void AddArchivesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object archive = null;
            //string profileName = null;
            //string aid = null;
            //string archiveDetectionProfileName = null;
            //bool? taxonomy = null;
            //bool? insertEntity = null;
            //string contentType = null;
            //var response = instance.AddArchives(token, archive, profileName, aid, archiveDetectionProfileName, taxonomy, insertEntity, contentType);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddEntities
        /// </summary>
        [Test]
        public void AddEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object entity = null;
            //var response = instance.AddEntities(token, entity);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddFacts
        /// </summary>
        [Test]
        public void AddFactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object fact = null;
            //var response = instance.AddFacts(token, fact);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddLabels
        /// </summary>
        [Test]
        public void AddLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object label = null;
            //var response = instance.AddLabels(token, label);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddModelStructureForComponent
        /// </summary>
        [Test]
        public void AddModelStructureForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object modelStructure = null;
            //string profileName = null;
            //var response = instance.AddModelStructureForComponent(token, modelStructure, profileName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddReportElements
        /// </summary>
        [Test]
        public void AddReportElementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object reportElement = null;
            //var response = instance.AddReportElements(token, reportElement);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddSections
        /// </summary>
        [Test]
        public void AddSectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object section = null;
            //string profileName = null;
            //var response = instance.AddSections(token, section, profileName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddTaxonomy
        /// </summary>
        [Test]
        public void AddTaxonomyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string eid = null;
            //List<string> entrypoint = null;
            //string profileName = null;
            //string aid = null;
            //bool? insertEntity = null;
            //var response = instance.AddTaxonomy(token, eid, entrypoint, profileName, aid, insertEntity);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteArchive
        /// </summary>
        [Test]
        public void DeleteArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //string aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //var response = instance.DeleteArchive(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteEntity
        /// </summary>
        [Test]
        public void DeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //string eid = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> ticker = null;
            //var response = instance.DeleteEntity(token, profileName, eid, cik, edinetcode, ticker);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteLabel
        /// </summary>
        [Test]
        public void DeleteLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //string aid = null;
            //string section = null;
            //string reportElement = null;
            //string language = null;
            //List<string> labelRole = null;
            //var response = instance.DeleteLabel(token, profileName, aid, section, reportElement, language, labelRole);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteModelStructureForComponent
        /// </summary>
        [Test]
        public void DeleteModelStructureForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //List<string> aid = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //var response = instance.DeleteModelStructureForComponent(token, aid, section, hypercube);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteReportElement
        /// </summary>
        [Test]
        public void DeleteReportElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //string aid = null;
            //string section = null;
            //string reportElement = null;
            //var response = instance.DeleteReportElement(token, profileName, aid, section, reportElement);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSection
        /// </summary>
        [Test]
        public void DeleteSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //string aid = null;
            //string section = null;
            //var response = instance.DeleteSection(token, profileName, aid, section);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test EditArchives
        /// </summary>
        [Test]
        public void EditArchivesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object patch = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> entityTag = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> sic = null;
            //List<string> ticker = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //var response = instance.EditArchives(token, patch, profileName, aid, entityTag, eid, cik, edinetcode, sic, ticker, archiveFiscalYear, archiveFiscalPeriod, archiveTag);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test EditEntities
        /// </summary>
        [Test]
        public void EditEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object patch = null;
            //string profileName = null;
            //List<string> entityTag = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> sic = null;
            //List<string> ticker = null;
            //var response = instance.EditEntities(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test EditFacts
        /// </summary>
        [Test]
        public void EditFactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Object patch = null;
            //string profileName = null;
            //List<string> entityTag = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> sic = null;
            //List<string> ticker = null;
            //List<string> aid = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //string map = null;
            //string rule = null;
            //string report = null;
            //string additionalRules = null;
            //bool? open = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionTypes = null;
            //Dictionary<string, string> defaultDimensionValues = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //Dictionary<string, int?> dimensionColumns = null;
            //Dictionary<string, string> dimensionAggregation = null;
            //string aggregationFunction = null;
            //bool? validate = null;
            //bool? count = null;
            //var response = instance.EditFacts(token, patch, profileName, entityTag, eid, cik, edinetcode, sic, ticker, aid, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetArchives
        /// </summary>
        [Test]
        public void GetArchivesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //string language = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetArchives(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, language, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetComponents
        /// </summary>
        [Test]
        public void GetComponentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> eid = null;
            //List<string> ticker = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> aid = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //bool? validate = null;
            //string language = null;
            //var response = instance.GetComponents(token, profileName, eid, ticker, entityTag, sic, cik, edinetcode, archiveFiscalYear, archiveFiscalPeriod, archiveTag, aid, section, hypercube, disclosure, reportElement, label, count, top, skip, validate, language);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetDataPointsForComponent
        /// </summary>
        [Test]
        public void GetDataPointsForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //bool? labels = null;
            //bool? metadata = null;
            //bool? open = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //List<string> archiveTag = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //bool? merge = null;
            //string language = null;
            //bool? _override = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetDataPointsForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, labels, metadata, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, merge, language, _override, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetEntities
        /// </summary>
        [Test]
        public void GetEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> entityTag = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> edinetcode = null;
            //List<string> sic = null;
            //List<string> ticker = null;
            //string entitySearch = null;
            //int? entitySearchOffset = null;
            //int? entitySearchLimit = null;
            //string language = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetEntities(token, profileName, entityTag, eid, cik, edinetcode, sic, ticker, entitySearch, entitySearchOffset, entitySearchLimit, language, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFactTableForComponent
        /// </summary>
        [Test]
        public void GetFactTableForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //string additionalRules = null;
            //bool? labels = null;
            //bool? metadata = null;
            //string auditTrails = null;
            //bool? open = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //List<string> archiveTag = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //string aggregationFunction = null;
            //bool? validate = null;
            //bool? merge = null;
            //string language = null;
            //bool? _override = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetFactTableForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, archiveTag, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFactTableForReport
        /// </summary>
        [Test]
        public void GetFactTableForReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //bool? open = null;
            //string report = null;
            //bool? labels = null;
            //bool? metadata = null;
            //string auditTrails = null;
            //string language = null;
            //string aggregationFunction = null;
            //bool? validate = null;
            //bool? _override = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetFactTableForReport(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, open, report, labels, metadata, auditTrails, language, aggregationFunction, validate, _override, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFacts
        /// </summary>
        [Test]
        public void GetFactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //string map = null;
            //string rule = null;
            //string report = null;
            //string additionalRules = null;
            //bool? labels = null;
            //bool? metadata = null;
            //string auditTrails = null;
            //bool? open = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionTypes = null;
            //Dictionary<string, string> defaultDimensionValues = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //Dictionary<string, int?> dimensionColumns = null;
            //Dictionary<string, string> dimensionAggregation = null;
            //string aggregationFunction = null;
            //bool? validate = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetFacts(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetLabels
        /// </summary>
        [Test]
        public void GetLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //string language = null;
            //List<string> labelRole = null;
            //bool? onlyTextBlocks = null;
            //List<string> kind = null;
            //bool? eliminateReportElementDuplicates = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetLabels(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, labelRole, onlyTextBlocks, kind, eliminateReportElementDuplicates, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetModelStructureForComponent
        /// </summary>
        [Test]
        public void GetModelStructureForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //string language = null;
            //bool? indent = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetModelStructureForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, language, indent, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPeriods
        /// </summary>
        [Test]
        public void GetPeriodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetPeriods(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetReportElements
        /// </summary>
        [Test]
        public void GetReportElementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //bool? builtin = null;
            //bool? onlyNames = null;
            //string report = null;
            //List<string> label = null;
            //bool? onlyTextBlocks = null;
            //List<string> kind = null;
            //string language = null;
            //string contentType = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetReportElements(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, builtin, onlyNames, report, label, onlyTextBlocks, kind, language, contentType, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetRules
        /// </summary>
        [Test]
        public void GetRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> section = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetRules(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, disclosure, reportElement, label, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //List<string> archiveTag = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //bool? validate = null;
            //string language = null;
            //bool? count = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSections(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, archiveFiscalYear, archiveFiscalPeriod, archiveTag, section, hypercube, disclosure, reportElement, label, validate, language, count, top, skip);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSpreadsheetForComponent
        /// </summary>
        [Test]
        public void GetSpreadsheetForComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> section = null;
            //List<string> hypercube = null;
            //List<string> concept = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //string additionalRules = null;
            //string auditTrails = null;
            //bool? open = null;
            //List<string> archiveTag = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //List<string> disclosure = null;
            //List<string> reportElement = null;
            //List<string> label = null;
            //string aggregationFunction = null;
            //bool? validate = null;
            //bool? merge = null;
            //string language = null;
            //bool? _override = null;
            //bool? eliminate = null;
            //int? eliminationThreshold = null;
            //bool? populate = null;
            //bool? autoSlice = null;
            //List<int?> row = null;
            //List<int?> column = null;
            //bool? flattenRowHeaders = null;
            //var response = instance.GetSpreadsheetForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, auditTrails, open, archiveTag, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, eliminate, eliminationThreshold, populate, autoSlice, row, column, flattenRowHeaders);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSpreadsheetForReport
        /// </summary>
        [Test]
        public void GetSpreadsheetForReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string profileName = null;
            //List<string> aid = null;
            //List<string> eid = null;
            //List<string> cik = null;
            //List<string> ticker = null;
            //List<string> edinetcode = null;
            //List<string> entityTag = null;
            //List<string> sic = null;
            //List<string> fiscalYear = null;
            //List<string> fiscalPeriod = null;
            //List<string> fiscalPeriodType = null;
            //string report = null;
            //bool? validate = null;
            //string auditTrails = null;
            //string language = null;
            //bool? eliminate = null;
            //int? eliminationThreshold = null;
            //bool? populate = null;
            //List<int?> row = null;
            //List<int?> column = null;
            //bool? flattenRowHeaders = null;
            //List<string> archiveTag = null;
            //List<string> archiveFiscalYear = null;
            //List<string> archiveFiscalPeriod = null;
            //bool? _override = null;
            //bool? open = null;
            //Dictionary<string, List<string>> dimensions = null;
            //Dictionary<string, string> dimensionsCategory = null;
            //Dictionary<string, bool?> dimensionsVisible = null;
            //Dictionary<string, bool?> dimensionSlicers = null;
            //string aggregationFunction = null;
            //var response = instance.GetSpreadsheetForReport(token, profileName, aid, eid, cik, ticker, edinetcode, entityTag, sic, fiscalYear, fiscalPeriod, fiscalPeriodType, report, validate, auditTrails, language, eliminate, eliminationThreshold, populate, row, column, flattenRowHeaders, archiveTag, archiveFiscalYear, archiveFiscalPeriod, _override, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, aggregationFunction);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
