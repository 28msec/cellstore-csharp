using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CellStore.Client;
using CellStore.Api;
using CellStore.Model;

namespace CellStore.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<DataApi> (instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test AddEntities
        /// </summary>
        [Test]
        public void AddEntitiesTest()
        {
            // TODO: add unit test for the method 'AddEntities'
            string token = null; // TODO: replace null with proper value
            Object entity = null; // TODO: replace null with proper value
            var response = instance.AddEntities(token, entity);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddFacts
        /// </summary>
        [Test]
        public void AddFactsTest()
        {
            // TODO: add unit test for the method 'AddFacts'
            string token = null; // TODO: replace null with proper value
            Object fact = null; // TODO: replace null with proper value
            var response = instance.AddFacts(token, fact);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddFilings
        /// </summary>
        [Test]
        public void AddFilingsTest()
        {
            // TODO: add unit test for the method 'AddFilings'
            string token = null; // TODO: replace null with proper value
            Object filing = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            string aid = null; // TODO: replace null with proper value
            string filingDetectionProfileName = null; // TODO: replace null with proper value
            bool? taxonomy = null; // TODO: replace null with proper value
            bool? insertEntity = null; // TODO: replace null with proper value
            string contentType = null; // TODO: replace null with proper value
            var response = instance.AddFilings(token, filing, profileName, aid, filingDetectionProfileName, taxonomy, insertEntity, contentType);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddLabels
        /// </summary>
        [Test]
        public void AddLabelsTest()
        {
            // TODO: add unit test for the method 'AddLabels'
            string token = null; // TODO: replace null with proper value
            Object label = null; // TODO: replace null with proper value
            var response = instance.AddLabels(token, label);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddModelStructureForComponent
        /// </summary>
        [Test]
        public void AddModelStructureForComponentTest()
        {
            // TODO: add unit test for the method 'AddModelStructureForComponent'
            string token = null; // TODO: replace null with proper value
            Object modelStructure = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            var response = instance.AddModelStructureForComponent(token, modelStructure, profileName);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddReportElements
        /// </summary>
        [Test]
        public void AddReportElementsTest()
        {
            // TODO: add unit test for the method 'AddReportElements'
            string token = null; // TODO: replace null with proper value
            Object reportElement = null; // TODO: replace null with proper value
            var response = instance.AddReportElements(token, reportElement);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddSections
        /// </summary>
        [Test]
        public void AddSectionsTest()
        {
            // TODO: add unit test for the method 'AddSections'
            string token = null; // TODO: replace null with proper value
            Object section = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            var response = instance.AddSections(token, section, profileName);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddTaxonomy
        /// </summary>
        [Test]
        public void AddTaxonomyTest()
        {
            // TODO: add unit test for the method 'AddTaxonomy'
            string token = null; // TODO: replace null with proper value
            string eid = null; // TODO: replace null with proper value
            List<string> entrypoint = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            string aid = null; // TODO: replace null with proper value
            bool? insertEntity = null; // TODO: replace null with proper value
            var response = instance.AddTaxonomy(token, eid, entrypoint, profileName, aid, insertEntity);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteEntity
        /// </summary>
        [Test]
        public void DeleteEntityTest()
        {
            // TODO: add unit test for the method 'DeleteEntity'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            var response = instance.DeleteEntity(token, profileName, eid, cik, edinetcode, ticker);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteFiling
        /// </summary>
        [Test]
        public void DeleteFilingTest()
        {
            // TODO: add unit test for the method 'DeleteFiling'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            var response = instance.DeleteFiling(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteLabel
        /// </summary>
        [Test]
        public void DeleteLabelTest()
        {
            // TODO: add unit test for the method 'DeleteLabel'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            string aid = null; // TODO: replace null with proper value
            string section = null; // TODO: replace null with proper value
            string reportElement = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            List<string> labelRole = null; // TODO: replace null with proper value
            var response = instance.DeleteLabel(token, profileName, aid, section, reportElement, language, labelRole);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteModelStructureForComponent
        /// </summary>
        [Test]
        public void DeleteModelStructureForComponentTest()
        {
            // TODO: add unit test for the method 'DeleteModelStructureForComponent'
            string token = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            var response = instance.DeleteModelStructureForComponent(token, aid, section, hypercube);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteReportElement
        /// </summary>
        [Test]
        public void DeleteReportElementTest()
        {
            // TODO: add unit test for the method 'DeleteReportElement'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            string aid = null; // TODO: replace null with proper value
            string section = null; // TODO: replace null with proper value
            string reportElement = null; // TODO: replace null with proper value
            var response = instance.DeleteReportElement(token, profileName, aid, section, reportElement);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSection
        /// </summary>
        [Test]
        public void DeleteSectionTest()
        {
            // TODO: add unit test for the method 'DeleteSection'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            string aid = null; // TODO: replace null with proper value
            string section = null; // TODO: replace null with proper value
            var response = instance.DeleteSection(token, profileName, aid, section);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test EditFacts
        /// </summary>
        [Test]
        public void EditFactsTest()
        {
            // TODO: add unit test for the method 'EditFacts'
            string token = null; // TODO: replace null with proper value
            Object patch = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> concept = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            string map = null; // TODO: replace null with proper value
            string rule = null; // TODO: replace null with proper value
            string report = null; // TODO: replace null with proper value
            string additionalRules = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            Dictionary<string, List<string>> dimensions = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionTypes = null; // TODO: replace null with proper value
            Dictionary<string, string> defaultDimensionValues = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionsCategory = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionsVisible = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionSlicers = null; // TODO: replace null with proper value
            Dictionary<string, int?> dimensionColumns = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionAggregation = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            var response = instance.EditFacts(token, patch, profileName, tag, eid, cik, edinetcode, sic, ticker, aid, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetComponents
        /// </summary>
        [Test]
        public void GetComponentsTest()
        {
            // TODO: add unit test for the method 'GetComponents'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            var response = instance.GetComponents(token, profileName, eid, ticker, tag, sic, cik, edinetcode, archiveFiscalYear, archiveFiscalPeriod, filingKind, aid, section, hypercube, disclosure, reportElement, label, count, top, skip, validate, language);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetEntities
        /// </summary>
        [Test]
        public void GetEntitiesTest()
        {
            // TODO: add unit test for the method 'GetEntities'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            string entitySearch = null; // TODO: replace null with proper value
            int? entitySearchOffset = null; // TODO: replace null with proper value
            int? entitySearchLimit = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetEntities(token, profileName, tag, eid, cik, edinetcode, sic, ticker, entitySearch, entitySearchOffset, entitySearchLimit, language, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFactTableForComponent
        /// </summary>
        [Test]
        public void GetFactTableForComponentTest()
        {
            // TODO: add unit test for the method 'GetFactTableForComponent'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> concept = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            string additionalRules = null; // TODO: replace null with proper value
            bool? labels = null; // TODO: replace null with proper value
            bool? metadata = null; // TODO: replace null with proper value
            string auditTrails = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            Dictionary<string, List<string>> dimensions = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionsCategory = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionsVisible = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionSlicers = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            bool? merge = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetFactTableForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionsCategory, dimensionsVisible, dimensionSlicers, filingKind, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFactTableForReport
        /// </summary>
        [Test]
        public void GetFactTableForReportTest()
        {
            // TODO: add unit test for the method 'GetFactTableForReport'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> concept = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            string report = null; // TODO: replace null with proper value
            bool? labels = null; // TODO: replace null with proper value
            bool? metadata = null; // TODO: replace null with proper value
            string auditTrails = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetFactTableForReport(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, open, report, labels, metadata, auditTrails, language, aggregationFunction, validate, _override, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFacts
        /// </summary>
        [Test]
        public void GetFactsTest()
        {
            // TODO: add unit test for the method 'GetFacts'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> concept = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            string map = null; // TODO: replace null with proper value
            string rule = null; // TODO: replace null with proper value
            string report = null; // TODO: replace null with proper value
            string additionalRules = null; // TODO: replace null with proper value
            bool? labels = null; // TODO: replace null with proper value
            bool? metadata = null; // TODO: replace null with proper value
            string auditTrails = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            Dictionary<string, List<string>> dimensions = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionTypes = null; // TODO: replace null with proper value
            Dictionary<string, string> defaultDimensionValues = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionsCategory = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionsVisible = null; // TODO: replace null with proper value
            Dictionary<string, bool?> dimensionSlicers = null; // TODO: replace null with proper value
            Dictionary<string, int?> dimensionColumns = null; // TODO: replace null with proper value
            Dictionary<string, string> dimensionAggregation = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetFacts(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, map, rule, report, additionalRules, labels, metadata, auditTrails, open, dimensions, dimensionTypes, defaultDimensionValues, dimensionsCategory, dimensionsVisible, dimensionSlicers, dimensionColumns, dimensionAggregation, aggregationFunction, validate, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFilings
        /// </summary>
        [Test]
        public void GetFilingsTest()
        {
            // TODO: add unit test for the method 'GetFilings'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetFilings(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, language, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetLabels
        /// </summary>
        [Test]
        public void GetLabelsTest()
        {
            // TODO: add unit test for the method 'GetLabels'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            List<string> labelRole = null; // TODO: replace null with proper value
            bool? onlyTextBlocks = null; // TODO: replace null with proper value
            List<string> kind = null; // TODO: replace null with proper value
            bool? eliminateReportElementDuplicates = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetLabels(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, section, hypercube, disclosure, reportElement, label, language, labelRole, onlyTextBlocks, kind, eliminateReportElementDuplicates, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetModelStructureForComponent
        /// </summary>
        [Test]
        public void GetModelStructureForComponentTest()
        {
            // TODO: add unit test for the method 'GetModelStructureForComponent'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? indent = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetModelStructureForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, section, hypercube, disclosure, reportElement, label, language, indent, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPeriods
        /// </summary>
        [Test]
        public void GetPeriodsTest()
        {
            // TODO: add unit test for the method 'GetPeriods'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetPeriods(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetReportElements
        /// </summary>
        [Test]
        public void GetReportElementsTest()
        {
            // TODO: add unit test for the method 'GetReportElements'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            bool? builtin = null; // TODO: replace null with proper value
            bool? onlyNames = null; // TODO: replace null with proper value
            string report = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            bool? onlyTextBlocks = null; // TODO: replace null with proper value
            List<string> kind = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            string contentType = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetReportElements(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, section, hypercube, disclosure, reportElement, builtin, onlyNames, report, label, onlyTextBlocks, kind, language, contentType, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetRules
        /// </summary>
        [Test]
        public void GetRulesTest()
        {
            // TODO: add unit test for the method 'GetRules'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetRules(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, section, disclosure, reportElement, label, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSectionsTest()
        {
            // TODO: add unit test for the method 'GetSections'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? count = null; // TODO: replace null with proper value
            int? top = null; // TODO: replace null with proper value
            int? skip = null; // TODO: replace null with proper value
            var response = instance.GetSections(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, archiveFiscalYear, archiveFiscalPeriod, filingKind, section, hypercube, disclosure, reportElement, label, validate, language, count, top, skip);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSpreadsheetForComponent
        /// </summary>
        [Test]
        public void GetSpreadsheetForComponentTest()
        {
            // TODO: add unit test for the method 'GetSpreadsheetForComponent'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> section = null; // TODO: replace null with proper value
            List<string> hypercube = null; // TODO: replace null with proper value
            List<string> concept = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            string additionalRules = null; // TODO: replace null with proper value
            string auditTrails = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> disclosure = null; // TODO: replace null with proper value
            List<string> reportElement = null; // TODO: replace null with proper value
            List<string> label = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            bool? merge = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            bool? eliminate = null; // TODO: replace null with proper value
            int? eliminationThreshold = null; // TODO: replace null with proper value
            bool? populate = null; // TODO: replace null with proper value
            bool? autoSlice = null; // TODO: replace null with proper value
            List<int?> row = null; // TODO: replace null with proper value
            List<int?> column = null; // TODO: replace null with proper value
            bool? flattenRowHeaders = null; // TODO: replace null with proper value
            var response = instance.GetSpreadsheetForComponent(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, section, hypercube, concept, fiscalYear, fiscalPeriod, fiscalPeriodType, archiveFiscalYear, archiveFiscalPeriod, additionalRules, auditTrails, open, filingKind, disclosure, reportElement, label, aggregationFunction, validate, merge, language, _override, eliminate, eliminationThreshold, populate, autoSlice, row, column, flattenRowHeaders);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSpreadsheetForReport
        /// </summary>
        [Test]
        public void GetSpreadsheetForReportTest()
        {
            // TODO: add unit test for the method 'GetSpreadsheetForReport'
            string token = null; // TODO: replace null with proper value
            string profileName = null; // TODO: replace null with proper value
            List<string> aid = null; // TODO: replace null with proper value
            List<string> eid = null; // TODO: replace null with proper value
            List<string> cik = null; // TODO: replace null with proper value
            List<string> ticker = null; // TODO: replace null with proper value
            List<string> edinetcode = null; // TODO: replace null with proper value
            List<string> tag = null; // TODO: replace null with proper value
            List<string> sic = null; // TODO: replace null with proper value
            List<string> fiscalYear = null; // TODO: replace null with proper value
            List<string> fiscalPeriod = null; // TODO: replace null with proper value
            List<string> fiscalPeriodType = null; // TODO: replace null with proper value
            string report = null; // TODO: replace null with proper value
            bool? validate = null; // TODO: replace null with proper value
            string auditTrails = null; // TODO: replace null with proper value
            string language = null; // TODO: replace null with proper value
            bool? eliminate = null; // TODO: replace null with proper value
            int? eliminationThreshold = null; // TODO: replace null with proper value
            bool? populate = null; // TODO: replace null with proper value
            List<int?> row = null; // TODO: replace null with proper value
            List<int?> column = null; // TODO: replace null with proper value
            bool? flattenRowHeaders = null; // TODO: replace null with proper value
            List<string> filingKind = null; // TODO: replace null with proper value
            List<string> archiveFiscalYear = null; // TODO: replace null with proper value
            List<string> archiveFiscalPeriod = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            bool? open = null; // TODO: replace null with proper value
            string aggregationFunction = null; // TODO: replace null with proper value
            var response = instance.GetSpreadsheetForReport(token, profileName, aid, eid, cik, ticker, edinetcode, tag, sic, fiscalYear, fiscalPeriod, fiscalPeriodType, report, validate, auditTrails, language, eliminate, eliminationThreshold, populate, row, column, flattenRowHeaders, filingKind, archiveFiscalYear, archiveFiscalPeriod, _override, open, aggregationFunction);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
